<?xml version="1.0" encoding="utf-8"?>
<manual>

    <item search="c">
        <p>最简单的表达式是在文本中查找特定的字母或单词。它的工作原理类似于任何程序中的“搜索”选项。</p>
        <p>例如，如果查找字母“d”，正则表达式将查找相同的字母“d”。如果我们查找单词“hello”，表达式将是“hello”。就这么简单。</p>
    </item>

    <item search=".">
        <p>正则表达式中的点（.）表示任意字符（数字、字母、特殊字符）。</p>
        <p>如果我们查找任何字符后接字母 a，例如“5a”、“da”、“@a”，模式将是“.a”。</p>
        <p>此表达式可与组或量词配合使用。例如，如果我们想找到任意 5 个字符，可以使用 “.{5}”。</p>
    </item>

    <item>
        <searches>
            <search element="\\w" />
            <search element="\\d" />
            <search element="\\s" />
        </searches>
        <p>正则表达式“{line}w”、“{line}d”、“{line}s”分别表示任意字母、数字或空格。</p>
        <p>就像点号可以通过其他表达式定义（组、量词）。例如，要找到两个字母后接空格和一个数字（例如“aB 3”），可以使用正则表达式“{line}w{2}{line}s{line}d”。</p>
    </item>

    <item>
        <searches>
            <search element="\\W" />
            <search element="\\D" />
            <search element="\\S" />
        </searches>
        <p>正则表达式“{line}W”、“{line}D”、“{line}S”分别定义一个不包含字母、数字或空格的模式。</p>
        <p>也就是说，如果查找除空格以外的任意字符，可以使用“{line}S”。</p>
        <p>例如，查找文本“5Q@.”（任何没有空格的字符），可以使用“{line}S{4}”。</p>
    </item>

    <item search="[abc]">
        <p>此表达式找到在集合中的任何匹配项。</p>
        <p>例如，表达式 [bcd] 查找文本“b”、“c”或“d”。</p>
        <p>您还可以在其中使用表达式，例如 [{line}w{line}d-@] 将找到任何字母数字字符、连字符或“@”符号。</p>
        <p>像前面的表达式一样，可以将它们分组或使用量词。</p>
        <p>集合的一个特殊用途是范围，允许指定开始的数字或字母以及结束字符。例如，[A-Z] 将找到从“A”到“Z”的任何大写字母。（对于小写，可以使用 [a-z]）。</p>
        <p>例如，要查找字母“r”到“u”以及“c”到“e”之间的字母，可以使用 “[r-uc-e]”。</p>
    </item>

    <item search="[^abc]">
        <p>这是集合的否定形式，也就是说如果 [abc] 找到“a”、“b”或“c”的任何匹配项。否定集合 [^abc] 将找到除“a”、“b”、“c”之外的任何字符。</p>
        <p>所有集合规则在否定中均有效。</p>
    </item>

    <item>
        <searches>
            <search element="^" />
            <search element="$" />
        </searches>
        <p>表达式“^”和“$”用于标记字符串的开头和结尾。例如，查找模式“a”将找到文本中的所有字母“a”，然而查找“a$”将找到字符串的最后一个字母（如果它是 a）。</p>
        <p>“5a”（字符串开头的数字）->“^{line}d”</p>
    </item>

    <item search="\\b">
        <p>表达式“{line}b”用于标记字符串或空格的开头和结尾的不可见字符。</p>
        <p>例如，对于表达式“{line}bye{line}b”，将找到文本“ye”，但不会找到文本“bye”，因为 b 不对应于空格、字符串的开头或结尾。</p>
    </item>

    <item search="\\B">
        <p>表达式“{line}B”用于标记一个非边界的词（可见字符）。</p>
        <p>例如，对于表达式“{line}Bye”，将找到文本“bye”，但不会找到文本“ye”，因为之前存在不可见字符（行首）。</p>
    </item>

    <item search="\\.">
        <p>当我们想找到一个正则表达式的保留字符时，我们使用转义字符“{line}”。</p>
        <p>例如，如果我们想在文本末尾找到一个点，不能使用“.$”，因为点表示任意字符。因此，我们使用转义字符，这样它看起来像“{line}.$”。</p>
        <p>例如，如果我想找到文本“{line}w”，可以使用表达式“{line}{line}w”。</p>
    </item>

    <item search="(abc)">
        <p>您可以将匹配项分组以便进行替换或其他用途。</p>
        <p>例如，如果我们使用表达式“^({line}w).+”将查找以字母开头的任何字符串，但捕获首字母。</p>
        <p>如果我们想要获取它，使用替换表达式“$1”将返回首字母。</p>
        <p>字符 +、* 和 ? 分别作为量词 1 或更多、0 或更多、0 或 1，并可以与组一起使用，例如 ({line}w{line}d)?a，在找到“a”并/或它前面有字母或数字时匹配。</p>
    </item>

    <item>
        <searches>
            <search element="(?:abc)" />
            <search element="(?=abc)" />
            <search element="(?!abc)" />
        </searches>
        <p>(?:abc) 是一个未捕获的组，允许对整个组使用量词，而不需要将其捕获在组中。</p>

        <p>(?=abc) 上述匹配只有在满足此组的情况下才为真。例如，表达式 {line}w+(?={line}d+) 仅在后面有数字时匹配字母。</p>

        <p>(?!abc) 否定前一个特殊组，即仅在不满足该组的情况下满足之前的匹配。</p>

    </item>

    <item>
        <searches>
            <search element="(?&lt;=abc)" />
            <search element="(?&lt;!abc)" />
        </searches>
        <p>(?&lt;=abc) 只有在满足此组的情况下，下一次匹配才为真。例如，表达式 (?&lt;=[A-Z])b 仅在前一个字母为大写时匹配字母 "b"。</p>

        <p>(?&lt;!abc) 否定后一个特殊组，即仅在不满足该组的情况下满足之后的匹配。</p>

    </item>

    <item search="|">
        <p>它充当布尔值，例如 (hi | goodbye) 捕获单词 "hi" 或 "goodbye"。</p>

        <p>{line}w|{line}d 捕获字母或数字。</p>

    </item>

    <item search="\\u0036">
        <p>允许通过其 ASCII 代码获取字符的表达式。</p>
        <p>形式为 uFFFF，其中 F 是有效的十六进制数字（0-9 和 A-F）。</p>
        <p>在此示例中，十六进制的数字 26 在十进制中为 54。</p>
        <p>它将捕获字符 4（ASCII 54）。</p>
    </item>

    <item search="\\1">
        <p>允许按编号重复使用捕获组的表达式。</p>
        <p>例如，要匹配文本 "hello hello"，可以使用表达式 "({line}w{5}){line}s{line}1"。</p>
        <p>{line}1 指的是第一个捕获组。</p>
        <p>这将匹配文本 "hello hello"。</p>
    </item>

</manual>
